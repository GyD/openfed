<?php
/**
 * @file
 * Install, uninstall and update hooks for Openfed.
 */

use Drupal\Core\Config\Entity\ConfigEntityUpdater;
use Drupal\field\FieldConfigInterface;

/**
 * This will content management view, unsetting broken bulk actions.
 */
function openfed_update_101203() {
  $default_admin_theme = 'openfed_admin';
  // Make sure the theme is installed.
  \Drupal::service('theme_installer')->install([$default_admin_theme]);

  // Set it as the admin theme.
  $config = \Drupal::service('config.factory')->getEditable('system.theme');
  $config->set('admin', $default_admin_theme)->save();
}

/**
 * Adds "File" entity type to the "enabled_entity_types" property in the
 * "pathauto.settings.yml" configuration to fix File URL alias status issue.
 */
function openfed_update_101204() {
  if (\Drupal::moduleHandler()->moduleExists('file_entity')) {
    // Loads pathauto settings configuration.
    $config = \Drupal::configFactory()->getEditable('pathauto.settings');
    // Gets the pathauto enabled entity types.
    $enabled_entity_types = $config->get('enabled_entity_types');
    // If the File entity type is already enabled we do nothing.
    if (in_array('file', $enabled_entity_types)) {
      return;
    }
    // Adds the File entity to the array of enabled entity types.
    $enabled_entity_types[] = 'file';
    sort($enabled_entity_types);
    // We update the configuration.
    $config->set('enabled_entity_types', $enabled_entity_types);
    $config->save();
  }
}

/**
 * Process allowed formats to provide a fix for the post update task
 * allowed_formats_post_update_formats2core.
 *
 * This hook will provide a fix for Openfed 12.1.x projects which were using
 * allowed_formats 2.x along with core allowed_formats. These projects may've
 * been using core allowed_formats already and, without this update, the
 * allowed_formats 3.x module will erase existing settings.
 *
 * This makes the allowed_formats_post_update_formats2core obsolete.
 */
function openfed_update_101205(&$sandbox) {
  \Drupal::classResolver(ConfigEntityUpdater::class)->update($sandbox, 'field_config', function (FieldConfigInterface $field_config): bool {
    // Can't use $field_config->getThirdPartySettings() because that doesn't
    // reveal if allowed_formats module key exists. If the module key exists, even
    // if it's empty, we want to remove it.
    if (!array_key_exists('allowed_formats', $field_config->getSettings() ?? []) || !array_key_exists('allowed_formats', $field_config->get('third_party_settings') ?? [])) {
      return FALSE;
    }

    // Get the core and contrib allowed_formats allowed formats.
    $allowed_formats_contrib = array_values(array_filter($field_config->getThirdPartySetting('allowed_formats', 'allowed_formats', [])));
    $allowed_formats_core = $field_config->getSetting('allowed_formats');

    // Let's merge both contrib and core formats.
    $allowed_formats = array_merge($allowed_formats_contrib, $allowed_formats_core);

    // If there are core allowed formats, set the settings with it and unset the
    // old third party settings value.
    if ($allowed_formats && !empty($allowed_formats)) {
      $field_config
        ->setSetting('allowed_formats', $allowed_formats)
        ->unsetThirdPartySetting('allowed_formats', 'allowed_formats');

      return TRUE;
    }

    return FALSE;
  });
}

/**
 * Install twig_real_content module.
 */
function openfed_update_101206(&$sandbox) {
  if (!\Drupal::moduleHandler()->moduleExists('twig_real_content')) {
    $installer = \Drupal::service('module_installer');
    $installer->install(['twig_real_content']);
  }
}
